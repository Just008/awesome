(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{183:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("blockquote",[s("p",[t._v("常用的设计模式有 23 种。根据行为准则的区分分为：创建型、结构型、行为型。")]),t._v(" "),s("p",[t._v("根据 "),s("code",[t._v("PHP")]),t._v(" 代码来完成关于设计模式的介绍")])]),t._v(" "),s("h2",{attrs:{id:"创建型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建型"}},[t._v("#")]),t._v(" 创建型")]),t._v(" "),s("p",[t._v("在软件工程中，创建型设计模式是处理对象创建机制的设计模式，试图以适当的方式来创建对象。对象创建的基本形式可能会带来设计问题，亦或增加了设计的复杂度。创建型设计模式通过控制这个对象的创建方式来解决此问题。")]),t._v(" "),s("h2",{attrs:{id:"结构型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构型"}},[t._v("#")]),t._v(" 结构型")]),t._v(" "),s("p",[t._v("在软件工程中，结构型设计模式是通过识别实体之间关系来简化设计的设计模式。")]),t._v(" "),s("h2",{attrs:{id:"行为型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行为型"}},[t._v("#")]),t._v(" 行为型")]),t._v(" "),s("p",[t._v("在软件工程中，行为设计模式是识别对象之间的通用通信模式并实现这些模式的设计模式。 通过这样做，这些模式增加了执行此通信的灵活性。")])])}],!1,null,null,null);a.default=r.exports}}]);