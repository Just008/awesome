(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{201:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("blockquote",[s("p",[t._v("作者：Shocker")]),t._v(" "),s("p",[t._v("链接："),s("a",{attrs:{href:"https://shockerli.net/post/1000-line-mysql-note/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://shockerli.net/post/1000-line-mysql-note/"),s("OutboundLink")],1)])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._m(47),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),t._m(55)])}),[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"一千行-mysql-学习笔记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一千行-mysql-学习笔记"}},[this._v("#")]),this._v(" 一千行 MySQL 学习笔记")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"windows服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#windows服务"}},[this._v("#")]),this._v(" Windows服务")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 启动MySQL\n    net start mysql\n-- 创建Windows服务\n    sc create mysql "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("binPath")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mysqld_bin_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("注意：等号与值之间有空格"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"连接与断开服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连接与断开服务器"}},[this._v("#")]),this._v(" 连接与断开服务器")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[this._v("mysql -h 地址 -P 端口 -u 用户名 -p 密码\n\nSHOW PROCESSLIST -- 显示哪些线程正在运行\nSHOW VARIABLES -- 显示系统变量信息\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"数据库操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[this._v("#")]),this._v(" 数据库操作")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 查看当前数据库\n    SELECT DATABASE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 显示当前时间、用户名、数据库版本\n    SELECT now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 创建库\n    CREATE DATABASE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" IF NOT EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PATTERN'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" IF EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 数据库名\n        同时删除该数据库相关的目录及其目录内容\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"表的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表的操作"}},[this._v("#")]),this._v(" 表的操作")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 创建表\n    CREATE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TEMPORARY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" IF NOT EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("库名."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 表的结构定义 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 表选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NOT NULL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("DEFAULT default_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AUTO_INCREMENT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UNIQUE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("KEY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PRIMARY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" KEY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COMMENT "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n-- 表选项\n    -- 字符集\n        CHARSET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("LOGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("STATUS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n        AUTO_INCREMENT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 行数\n    -- 数据文件目录\n        DATA DIRECTORY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'目录'")]),t._v("\n    -- 索引文件目录\n        INDEX DIRECTORY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'目录'")]),t._v("\n    -- 表注释\n        COMMENT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\n    -- 分区选项\n        PARTITION BY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("详细见手册"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-- 查看所有表\n    SHOW TABLES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pattern'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    SHOW TABLES FROM 库名\n-- 查看表机构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("COLUMNS")]),t._v(" FROM 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PATTERN'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    SHOW TABLE STATUS "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FROM db_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pattern'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("MYISAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" COLUMN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   -- 创建主键\n            ADD UNIQUE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("索引名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("-- 创建唯一索引\n            ADD INDEX "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("索引名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -- 创建普通索引\n            DROP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" COLUMN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 字段名      -- 删除字段\n            MODIFY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" COLUMN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("所有原有属性也需写上"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            CHANGE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" COLUMN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("删除主键前需删除其AUTO_INCREMENT属性"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n-- 删除表\n    DROP TABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" IF EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n-- 清空表数据\n    TRUNCATE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n-- 优化表\n    OPTIMIZE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NO_WRITE_TO_BINLOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n-- 修复表\n    REPAIR "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NO_WRITE_TO_BINLOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("QUICK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("EXTENDED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("USE_FRM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n-- 分析表\n    ANALYZE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NO_WRITE_TO_BINLOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"数据操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据操作"}},[this._v("#")]),this._v(" 数据操作")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 增\n    INSERT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INTO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" VALUES "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE 与 INSERT 完全一样，可互换。\n    INSERT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INTO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 表名 SET 字段名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", 字段名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n-- 查\n    SELECT 字段列表 FROM 表名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 其他子句"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 删除条件子句"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("新值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", 字段名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("新值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("更新条件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"字符集编码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符集编码"}},[this._v("#")]),this._v(" 字符集编码")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'character_set_%'")]),t._v("   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 变量值\n    SET character_set_client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gbk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    SET character_set_results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gbk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    SET character_set_connection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gbk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSET NAMES GBK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pattern'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/SHOW CHARSET "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pattern'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   查看所有字符集\n    SHOW COLLATION "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pattern'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"数据类型（列类型）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型（列类型）"}},[this._v("#")]),this._v(" 数据类型（列类型）")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 数值类型\n\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("字节    -128 ~ "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),t._v("      无符号位：0 ~ "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),t._v("\n    smallint    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("字节    -32768 ~ "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),t._v("\n    mediumint   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("字节    -8388608 ~ "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8388607")]),t._v("\n    int         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("字节\n    bigint      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("字节\n    int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   插入一个数"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v("，补填后为"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'00123'")]),t._v("\n    - 在满足要求的情况下，越小越好。\n    - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("表示布尔型。\n\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("单精度"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("字节\n    double"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("双精度"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M, D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     double"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M, D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M, D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 字符串类型\n\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65532")]),t._v("字节。\n    例：若一个表定义为 CREATE TABLE tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1 int, c2 char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", c3 varchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 问N的最大值是多少？ 答："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535")]),t._v("-1-2-4-30*3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/3\n\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 日期时间类型\n    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\n    datetime    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("字节    日期及时间     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("-01-01 00:00:00 到 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999")]),t._v("-12-31 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(":59:59\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("字节    日期         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("-01-01 到 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999")]),t._v("-12-31\n    timestamp   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("字节    时间戳        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19700101000000")]),t._v(" 到 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2038")]),t._v("-01-19 03:14:07\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("字节    时间         -838:59:59 到 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("838")]),t._v(":59:59\n    year        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("字节    年份         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1901")]),t._v(" - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2155")]),t._v("\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v("        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 枚举和集合\n\n-- 枚举"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ----------\nenum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val1, val2, val3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("smallint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n\n\n-- 集合（set） ----------\nset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val1, val2, val3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    create table tab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" gender set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'无'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    insert into tab values "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男, 女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"选择类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择类型"}},[this._v("#")]),this._v(" 选择类型")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- PHP角度\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 功能满足\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 存储空间尽量小，处理效率更高\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 考虑兼容问题\n\n-- IP存储 ----------\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 只需存储，可用字符串\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" PHP函数转换\n        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n        利用sprintf函数格式化字符串\n        sprintf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%u"')]),t._v(", ip2long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'192.168.3.134'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        然后用long2ip将整型转回IP字符串\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" MySQL函数转换"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("无符号整型，UNSIGNED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        INET_ATON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 将IP转为整型\n        INET_NTOA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2130706433")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 将整型转为IP\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"列属性（列约束）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列属性（列约束）"}},[this._v("#")]),this._v(" 列属性（列约束）")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" int, stu varchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", primary key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" int, stu varchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", age int, primary key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stu, age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null, "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'val'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default, "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'val'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    -- 此时表示强制使用默认值。\n    create table tab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" add_time timestamp default current_timestamp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x进行设置，或 alter table tbl auto_increment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(". COMMENT 注释\n    例：create table tab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" int "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" comment "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'注释内容'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(". FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" constraint "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("t1_t2_fk"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" foreign key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" references t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("外键字段） references 主表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("关联字段"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("主表记录删除时的动作"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("主表记录更新时的动作"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". restrict，拒绝父表删除和更新。\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"建表规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#建表规范"}},[this._v("#")]),this._v(" 建表规范")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[this._v("    -- Normal Format, NF\n        - 每个表保存一个实体信息\n        - 每个具有一个ID字段作为主键\n        - ID主键 + 原子表\n    -- 1NF, 第一范式\n        字段不能再分，就满足第一范式。\n    -- 2NF, 第二范式\n        满足第一范式的前提下，不能出现部分依赖。\n        消除符合主键就可以避免部分依赖。增加单列关键字。\n    -- 3NF, 第三范式\n        满足第二范式的前提下，不能出现传递依赖。\n        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n        将一个实体信息的数据放在一个表内实现。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"select"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[this._v("#")]),this._v(" SELECT")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("SELECT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ALL"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("DISTINCT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" select_expr FROM -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" WHERE -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GROUP BY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("合计函数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HAVING -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ORDER BY -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LIMIT\na. select_expr\n    -- 可以用 * 表示所有字段。\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" stu, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v("+25, now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n        - 使用 as 关键字，也可省略 as.\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" stu+10 as add10 from tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb. FROM 子句\n    用于标识查询来源。\n    -- 可以为表起别名。使用as关键字。\n        SELECT * FROM tb1 AS tt, tb2 AS bb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- from子句后，可以同时出现多个表。\n        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\n        SELECT * FROM tb1, tb2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 向优化符提示如何选择索引\n        USE INDEX、IGNORE INDEX、FORCE INDEX\n        SELECT * FROM table1 USE INDEX "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key1,key2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" WHERE "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" AND "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" AND "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        SELECT * FROM table1 IGNORE INDEX "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" WHERE "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" AND "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" AND "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("key3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nc. WHERE 子句\n    -- 从from获得的数据源中进行筛选。\n    -- 整型1表示真，0表示假。\n    -- 表达式由运算符和运算数组成。\n        -- 运算数：变量（字段）、值、函数返回值\n        -- 运算符：\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" null, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" like, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" in, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" between and, is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", and, or, not, xor\n            is/is not 加上ture/false/unknown，检验某个值的真假\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("与"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v("功能相同，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("可用于null比较\nd. GROUP BY 子句, 分组子句\n    GROUP BY 字段/别名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("排序方式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    分组后会进行排序。升序：ASC，降序：DESC\n    以下"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("合计函数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("需配合 GROUP BY 使用：\n    count 返回不同的非NULL值数目  count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("、count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" 求和\n    max 求最大值\n    min 求最小值\n    avg 求平均值\n    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\ne. HAVING 子句，条件子句\n    与 where 功能、用法相同，执行时机不同。\n    where 在开始时执行检测数据，对原数据进行过滤。\n    having 对筛选出的结果再次进行过滤。\n    having 字段必须是查询出来的，where 字段必须是数据表存在的。\n    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\n    where 不可以使用合计函数。一般需用合计函数才会用 having\n    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。\nf. ORDER BY 子句，排序子句\n    order by 排序字段/别名 排序方式 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(",排序字段/别名 排序方式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    升序：ASC，降序：DESC\n    支持多个字段的排序。\ng. LIMIT 子句，限制结果数量子句\n    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\n    limit 起始位置, 获取条数\n    省略第一个参数，表示从索引0开始。limit 获取条数\nh. DISTINCT, ALL 选项\n    distinct 去除重复记录\n    默认为 all, 全部记录\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"union"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#union"}},[this._v("#")]),this._v(" UNION")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    将多个select查询的结果组合成一个结果集合。\n    SELECT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". UNION "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ALL"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("DISTINCT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" SELECT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    默认 DISTINCT 方式，即所有返回的行都是唯一的\n    建议，对每个SELECT查询加上小括号包裹。\n    ORDER BY 排序时，需加上 LIMIT 进行结合。\n    需要各select查询的字段数量一样。\n    每个select查询的字段列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("数量、类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("应一致，因为结果中的字段名以第一条select语句为准。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"子查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[this._v("#")]),this._v(" 子查询")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    - 子查询需用括号包裹。\n-- from型\n    from后要求是一个表，必须给子查询结果取个别名。\n    - 简化每个查询内的条件。\n    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n    - 子查询返回一个表，表型子查询。\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select * from tb where id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" as subfrom where id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- where型\n    - 子查询返回一个值，标量子查询。\n    - 不需要给子查询取别名。\n    - where子查询内的表，不能直接用以更新。\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from tb where money "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("money"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 列子查询\n        如果子查询结果返回的是一列。\n        使用 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 或 not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 完成查询\n        exists 和 not exists 条件\n            如果子查询返回数据，则返回1或0。常用于判断条件。\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" column1 from t1 where exists "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select * from t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    -- 行子查询\n        查询条件是一个行。\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from t1 where "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id, gender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select id, gender from t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        行构造符："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col1, col2, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 或 ROW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col1, col2, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。\n    -- 特殊运算符\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    相当于 not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" some"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    相当于 in。any 是 some 的别名\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" some"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   不等同于 not in，不等于其中某一个。\n    all, some 可以配合其他运算符一起使用。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"连接查询-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连接查询-join"}},[this._v("#")]),this._v(" 连接查询(join)")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    将多个表的字段进行连接，可以指定连接条件。\n-- 内连接"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    - 默认就是内连接，可省略inner。\n    - 只有数据存在时才能发送连接。即连接结果不能出现空行。\n    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n    也可用where表示连接条件。\n    还有 using, 但需字段名相同。 using"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    -- 交叉连接 cross "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n        即，没有条件的内连接。\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from tb1 cross "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" tb2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 外连接"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    - 如果数据不存在，也会出现在连接结果中。\n    -- 左外连接 left "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n        如果数据不存在，左表记录会出现，而右表为null填充\n    -- 右外连接 right "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n        如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("natural "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    自动判断连接条件完成连接。\n    相当于省略了using，会自动查找相同字段名。\n    natural "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n    natural left "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n    natural right "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" extra_info.stu_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"导出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#导出"}},[this._v("#")]),this._v(" 导出")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * into outfile 文件地址 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("控制格式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" from 表名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   -- 导出表数据\n\nload data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("local"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" infile 文件地址 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("replace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ignore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" into table 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("控制格式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 导入数据\n    生成的数据默认的分隔符是制表符\n    local未指定，则数据文件必须在服务器上\n    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields  控制字段格式\n默认：fields terminated by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" enclosed by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" escaped by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    terminated by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("  -- 终止\n    enclosed by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'char'")]),t._v("      -- 包裹\n    escaped by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'char'")]),t._v("       -- 转义\n    -- 示例：\n        SELECT a,b,a+b INTO OUTFILE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/result.text'")]),t._v("\n        FIELDS TERMINATED BY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" OPTIONALLY ENCLOSED BY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("LINES")]),t._v(" TERMINATED BY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n        FROM test_table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlines   控制行格式\n默认：lines terminated by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    terminated by "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("  -- 终止\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"insert"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insert"}},[this._v("#")]),this._v(" INSERT")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("select语句获得的数据可以用insert插入。\n可以省略对列的指定，要求 values "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 括号内，提供给了按照列顺序出现的所有字段的值。\n    或者使用set语法。\n    INSERT INTO tbl_name SET "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("field")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value,"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".；\n可以一次性使用多个值，采用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("的形式。\n    INSERT INTO tbl_name VALUES "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n可以在列值指定时，使用表达式。\n    INSERT INTO tbl_name VALUES "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("field_value, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("+10, now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n可以使用一个特殊值 DEFAULT，表示该列使用默认值。\n    INSERT INTO tbl_name VALUES "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("field_value, DEFAULT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n可以通过一个查询的结果，作为需要插入的值。\n    INSERT INTO tbl_name SELECT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\n    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值, …"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[this._v("#")]),this._v(" DELETE")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("DELETE FROM tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WHERE where_definition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ORDER BY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT row_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n按照条件删除。where\n指定删除的最多记录数。limit\n可以通过排序条件删除。order by + limit\n支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"truncate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#truncate"}},[this._v("#")]),this._v(" TRUNCATE")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("TRUNCATE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tbl_name\n清空数据\n删除重建表\n区别：\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，truncate 是删除表再创建，delete 是逐条删除\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("，truncate 重置auto_increment的值。而delete不会\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("，truncate 不知道删除了几条，而delete知道。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("，当被用于带分区的表时，truncate 会保留分区\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"备份与还原"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#备份与还原"}},[this._v("#")]),this._v(" 备份与还原")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("备份，将数据的结构与表内数据保存起来。\n利用 mysqldump 指令完成。\n-- 导出\nmysqldump "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" db_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmysqldump "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ---database DB1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("DB2 DB3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmysqldump "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --all--database\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 文件名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D:/a.sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 文件名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D:/a.sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 导出所有表\n　　mysqldump -u用户名 -p密码 库名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 文件名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D:/a.sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 导出一个库\n　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 文件名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D:/a.sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n可以-w携带WHERE条件\n-- 导入\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 在登录mysql的情况下：\n　　"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v("  备份文件\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 在不登录的情况下\n　　mysql -u用户名 -p密码 库名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" 备份文件\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"视图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[this._v("#")]),this._v(" 视图")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("什么是视图：\n    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n    视图具有表结构文件，但不存在数据文件。\n    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。\n-- 创建视图\nCREATE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OR REPLACE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ALGORITHM "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UNDEFINED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" MERGE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" TEMPTABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" VIEW view_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" AS select_statement\n    - 视图名必须唯一，同时不能与表重名。\n    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n    - 可以指定视图执行的算法，通过ALGORITHM指定。\n    - column_list如果存在，则数目必须等于SELECT语句检索的列数\n-- 查看结构\n    SHOW CREATE VIEW view_name\n-- 删除视图\n    - 删除视图后，数据依然存在。\n    - 可同时删除多个视图。\n    DROP VIEW "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IF EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" view_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n-- 修改视图结构\n    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。\n    ALTER VIEW view_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" AS select_statement\n-- 视图作用\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 简化业务逻辑\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 对客户端隐藏真实的表结构\n-- 视图算法"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ALGORITHM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    MERGE       合并\n        将视图的查询语句，与外部查询需要先合并再执行！\n    TEMPTABLE   临时表\n        将视图执行完毕后，形成临时表，再做外层查询！\n    UNDEFINED   未定义"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("默认"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，指的是MySQL自主去选择相应的算法。\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"事务-transaction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事务-transaction"}},[this._v("#")]),this._v(" 事务(transaction)")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n    - 支持连续SQL的集体成功或集体撤销。\n    - 事务是数据库在数据晚自习方面的一个功能。\n    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n    - InnoDB被称为事务安全型引擎。\n-- 事务开启\n    START TRANSACTION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 或者 BEGIN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\n    COMMIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 事务回滚\n    ROLLBACK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    如果部分操作发生问题，映射到事务开启前。\n-- 事务的特性\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 原子性（Atomicity）\n        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 一致性（Consistency）\n        事务前后数据的完整性必须保持一致。\n        - 事务开始和结束时，外部数据一致\n        - 在整个事务过程中，操作是连续的\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 隔离性（Isolation）\n        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 持久性（Durability）\n        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。\n-- 事务的实现\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 要求是事务支持的表类型\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 执行一组相关的操作前开启事务\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。\n-- 事务的原理\n    利用InnoDB的自动提交"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("autocommit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("特性完成。\n    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。\n-- 注意\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 事务不能被嵌套\n-- 保存点\n    SAVEPOINT 保存点名称 -- 设置一个事务保存点\n    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\n    RELEASE SAVEPOINT 保存点名称 -- 删除保存点\n-- InnoDB自动提交特性设置\n    SET autocommit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("表示关闭自动提交，1表示开启自动提交。\n    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\n        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("针对当前连接"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("针对当前事务"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"锁表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#锁表"}},[this._v("#")]),this._v(" 锁表")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[this._v("表锁定只用于防止其它客户端进行不正当地读取和写入\nMyISAM 支持表锁，InnoDB 支持行锁\n-- 锁定\n    LOCK TABLES tbl_name "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("[")]),this._v("AS alias"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n-- 解锁\n    UNLOCK TABLES\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"触发器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[this._v("#")]),this._v(" 触发器")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n监听：记录的增加、修改、删除。\n-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n    参数：\n    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\n    trigger_event指明了激活触发程序的语句的类型\n        INSERT：将新行插入表时激活触发程序\n        UPDATE：更改某一行时激活触发程序\n        DELETE：从表中删除某一行时激活触发程序\n    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\n    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".END复合语句结构\n-- 删除\nDROP TRIGGER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("schema_name."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("trigger_name\n可以使用old和new代替旧的和新的数据\n    更新操作，更新前是old，更新后是new.\n    删除操作，只有old.\n    增加操作，只有new.\n-- 注意\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。\n")])])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 字符连接函数\nconcat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1,str2,"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconcat_ws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("separator,str1,str2,"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n-- 分支语句\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 条件 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    执行语句\nelseif 条件 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    执行语句\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    执行语句\nend "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n-- 修改最外层语句结束符\ndelimiter 自定义结束符号\n    SQL语句\n自定义结束符号\ndelimiter "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     -- 修改回原来的分号\n\n-- 语句块包裹\nbegin\n    语句块\nend\n\n-- 特殊的执行\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 只要添加记录，就会触发程序。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". Insert into on duplicate key update 语法会触发：\n    如果没有重复记录，会触发 before insert, after insert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    如果有重复记录并更新，会触发 before insert, before update, after update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    如果有重复记录但是没有发生更新，则触发 before insert, before update\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"sql编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sql编程"}},[this._v("#")]),this._v(" SQL编程")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("--// 局部变量 ----------\n-- 变量声明\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("declare")]),t._v(" var_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("default value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n-- 赋值\n    使用 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" 和 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" into 语句为变量赋值。\n    - 注意：在函数内是可以使用全局变量（用户自定义的变量）\n\n\n--// 全局变量 ----------\n-- 定义、赋值\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" 语句可以定义并为变量赋值。\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" @var "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("被当作关系运算符看待，使用:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("代替。（set语句可以使用"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 和 :"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("）。\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @var:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @v1:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("id, @v2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name from t1 limit "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from tbl_name where @var:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" into 可以将表中查询获得的数据赋给变量。\n    -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" into @max_height from tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    - 变量被定义后，在整个会话周期都有效（登录到退出）\n\n\n\n--// 控制结构 ----------\n-- if语句\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" search_condition "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    statement_list   \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("elseif search_condition "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    statement_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("else\n    statement_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nend "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- case语句\nCASE value WHEN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("compare-value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" THEN result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WHEN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("compare-value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" THEN result "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ELSE result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nEND\n-- while循环\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("begin_label:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" search_condition "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    statement_list\nend "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end_label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。\n    -- 退出循环\n        退出整个循环 leave\n        退出当前循环 iterate\n        通过退出的标签决定退出哪个循环\n\n\n\n--// 内置函数 ----------\n-- 数值函数\nabs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          -- 绝对值 abs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-10.9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nformat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x, d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    -- 格式化千分位数值 format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567.456")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,234")]),t._v(",567.46\nceil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         -- 向上取整 ceil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nfloor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        -- 向下取整 floor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nround"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        -- 四舍五入去整\nmod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m, n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       -- m%n m mod n 求余 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("%3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\npi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            -- 获得圆周率\npow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m, n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       -- m^n\nsqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         -- 算术平方根\nrand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          -- 随机数\ntruncate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x, d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  -- 截取d位小数\n-- 时间日期函数\nnow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", current_timestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     -- 当前日期时间\ncurrent_date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 -- 当前日期\ncurrent_time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 -- 当前时间\ndate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yyyy-mm-dd hh:ii:ss'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    -- 获取日期部分\ntime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yyyy-mm-dd hh:ii:ss'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    -- 获取时间部分\ndate_format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yyyy-mm-dd hh:ii:ss'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d %y %a %d %m %b %j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 格式化时间\nunix_timestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               -- 获得unix时间戳\nfrom_unixtime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                -- 从时间戳获得时间\n-- 字符串函数\nlength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          -- string长度，字节\nchar_length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     -- string的字符个数\nsubstring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str, position "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(",length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      -- 从str的position开始,取length个字符\nreplace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str ,search_str ,replace_str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   -- 在str中用replace_str替换search_str\ninstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string ,substring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    -- 返回substring首次在string中出现的位置\nconcat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   -- 连接字串\ncharset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            -- 返回字串字符集\nlcase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           -- 转换成小写\nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string, length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    -- 从string2中的左边起取length个字符\nload_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    -- 从文件读取内容\nlocate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("substring, string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(",start_position"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -- 同instr,但可指定开始位置\nlpad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string, length, pad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   -- 重复用pad加在string开头,直到字串长度为length\nltrim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           -- 去除前端空格\nrepeat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string, count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   -- 重复count次\nrpad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string, length, pad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   --在str后用pad补充,直到长度为length\nrtrim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           -- 去除后端空格\nstrcmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string1 ,string2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    -- 逐字符比较两字串大小\n-- 流程函数\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" when "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("when "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("else result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" end   多分支\nif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expr1,expr2,expr3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  双分支。\n-- 聚合函数\ncount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\navg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngroup_concat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-- 其他常用函数\nmd5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndefault"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n--// 存储函数，自定义函数 ----------\n-- 新建\n    CREATE FUNCTION function_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" RETURNS 返回值类型\n        函数体\n    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n    - 参数部分，由"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数名"')]),t._v("和"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数类型"')]),t._v("组成。多个参数用逗号隔开。\n    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n    - 多条语句应该使用 begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".end 语句块包含。\n    - 一定要有 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" 返回值语句。\n-- 删除\n    DROP FUNCTION "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IF EXISTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" function_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 查看\n    SHOW FUNCTION STATUS LIKE "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'partten'")]),t._v("\n    SHOW CREATE FUNCTION function_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 修改\n    ALTER FUNCTION function_name 函数选项\n\n--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。\n-- 创建\nCREATE PROCEDURE sp_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    过程体\n参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型\n注意，没有返回值。\n\n\n/* 存储过程 */ ------------------\n存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n调用：CALL 过程名\n-- 注意\n- 没有返回值。\n- 只能单独调用，不可夹杂在其他语句中\n-- 参数\nIN"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("OUT"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("INOUT 参数名 数据类型\nIN      输入：在调用过程中，将数据输入到过程体内部的参数\nOUT     输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT   输入输出：既可输入，也可输出\n-- 语法\nCREATE PROCEDURE 过程名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBEGIN\n    过程体\nEND\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"用户和权限管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户和权限管理"}},[this._v("#")]),this._v(" 用户和权限管理")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- root密码重置\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 停止MySQL服务\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Linux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" /usr/local/mysql/bin/safe_mysqld --skip-grant-tables "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Windows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" mysqld --skip-grant-tables\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". use mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". UPDATE "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" SET "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PASSWORD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"密码"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" WHERE "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". FLUSH PRIVILEGES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 增加用户\nCREATE "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(" 用户名 IDENTIFIED BY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 密码"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    - 必须拥有mysql数据库的全局CREATE "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v("权限，或拥有INSERT权限。\n    - 只能创建用户，不能赋予权限。\n    - 用户名，注意引号：如 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user_name'")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'192.168.1.1'")]),t._v("\n    - 密码也需引号，纯数字密码也要加引号\n    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(" old_user TO new_user\n-- 设置密码\nSET PASSWORD "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'密码'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'密码'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -- 为指定用户设置密码\n-- 删除用户\nDROP "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(" 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IDENTIFIED BY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'password'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    - all privileges 表示所有权限\n    - *.* 表示所有库的所有表\n    - 库名.表名 表示某库下面的某表\n    GRANT ALL PRIVILEGES ON "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("pms"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(".* TO "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pms'")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%'")]),t._v(" IDENTIFIED BY "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pms0817'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 查看权限\nSHOW GRANTS FOR 用户名\n    -- 查看当前用户权限\n    SHOW GRANTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 或 SHOW GRANTS FOR CURRENT_USER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 或 SHOW GRANTS FOR CURRENT_USER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\n    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\n    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\n    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n    当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PRIVILEGES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    -- 设置除GRANT OPTION之外的所有简单权限\nALTER   -- 允许使用ALTER TABLE\nALTER ROUTINE   -- 更改或取消已存储的子程序\nCREATE  -- 允许使用CREATE TABLE\nCREATE ROUTINE  -- 创建已存储的子程序\nCREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE\nCREATE "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v("     -- 允许使用CREATE "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(", DROP "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(", RENAME "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v("和REVOKE ALL PRIVILEGES。\nCREATE VIEW     -- 允许使用CREATE VIEW\nDELETE  -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE     -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".INTO OUTFILE和LOAD DATA INFILE\nINDEX   -- 允许使用CREATE INDEX和DROP INDEX\nINSERT  -- 允许使用INSERT\nLOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES  -- 未被实施\nRELOAD  -- 允许使用FLUSH\nREPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT  -- 允许使用SELECT\nSHOW DATABASES  -- 显示所有数据库\nSHOW VIEW   -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),t._v("\nSUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE  -- 允许使用UPDATE\nUSAGE   -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"表维护"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表维护"}},[this._v("#")]),this._v(" 表维护")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-- 分析和存储表的关键字分布\nANALYZE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NO_WRITE_TO_BINLOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE 表名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\noption "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("QUICK "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" FAST "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" MEDIUM "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" EXTENDED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" CHANGED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n-- 整理数据文件的碎片\nOPTIMIZE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NO_WRITE_TO_BINLOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" TABLE tbl_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(", tbl_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"杂项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#杂项"}},[this._v("#")]),this._v(" 杂项")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 每个库目录存在一个保存当前数据库的选项文件db.opt。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 注释：\n    单行注释 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 注释内容")]),t._v("\n    多行注释 /* 注释内容 */\n    单行注释 -- 注释内容     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 模式通配符：\n    _   任意单个字符\n    %   任意多个字符，甚至包括零字符\n    单引号需要进行转义 '\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". CMD命令行内的语句结束符可以为 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"G"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),t._v("，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(". SQL对大小写不敏感\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(". 清除已有语句：clear\n")])])])}],!1,null,null,null);n.default=e.exports}}]);